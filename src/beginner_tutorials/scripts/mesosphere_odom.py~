#!/usr/bin/env python
# license removed for brevity
import client
import rospy
import random
import tf
import time
import geometry_msgs.msg
from tf.transformations import *
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from std_msgs.msg import String
from tf.msg import tfMessage


def mesosphere_odom():
    pi = 3.1415926535
    scale = 100000
    pub = rospy.Publisher('odom',Odometry,queue_size=10000)
    odom_broadcaster = tf.TransformBroadcaster()    
    rospy.init_node('mesospere_odom',anonymous=True)
    rate = rospy.Rate(20) # 10hz
    last_time = rospy.get_time()  
    
    # parameter
    r = 0.08          # wheel radius
    rr = 0.01         # wheel roller radius     
    lx = 0.25         # semi distance between two wheels in the same row
    ly = 0.26         # semi distance between two wheels in the same col
    #/parameter
    
    # state params 
    x = 0
    y = 0
    z = 0
    th = 0
    #n1 = int(client.send("GetEncoderChange 1"))
    #n2 = int(client.send("GetEncoderChange 2"))
    #n3 = int(client.send("GetEncoderChange 3"))
    #n4 = int(client.send("GetEncoderChange 4"))
    #/state params
    while not rospy.is_shutdown():
       
        try:
		current_time = rospy.get_time()
		dt = (current_time - last_time) / 1000
	#       get speed and counts of four wheels and cal  x,y,z=0,th and Vx, Vy, Wz
		
		#print(client.send("GetEncoderChange 1"))
		#print(client.send("GetEncoderChange 2"))
		#print(client.send("GetEncoderChange 3"))
		#print(client.send("GetEncoderChange 4"))

	       
		n1 = int(client.send("GetEncoderChange 1"))# - n1
		n2 = int(client.send("GetEncoderChange 2"))# - n2
		n3 = int(client.send("GetEncoderChange 3"))# - n3
		n4 = int(client.send("GetEncoderChange 4"))# - n4
		
		w1 = 2 * pi * n1/dt / scale
		w2 = 2 * pi * n2/dt / scale
		w3 = 2 * pi * n3/dt / scale
		w4 = 2 * pi * n4/dt / scale
		print("%d, %d, %d, %d",w1,w2,w3,w4)
		Vx = r/4*(w1+w2+w3+w4)
		Vy = rr/4*(-w1+w2+w3-w4)
		Wz = (r+rr)/(4*lx+4*ly)*(-w1+w2-w3+w4)
	 
		x = x + Vx * dt
		y = y + Vy * dt
		th = th + Wz * dt        

		# broadcast the transform matrix message
		odom_quat =  quaternion_from_euler(-1,0,th)
		
		odom_trans = geometry_msgs.msg.TransformStamped()
		odom_trans.header.stamp = current_time
		odom_trans.header.frame_id = "odom"
		odom_trans.child_frame_id = "base_link"
		
		odom_trans.transform.translation.x = x
		odom_trans.transform.translation.y = y
		odom_trans.transform.translation.z = z
		odom_trans.transform.rotation = odom_quat
		odom_broadcaster.sendTransform((x,y,z),odom_quat,current_time,odom_trans.child_frame_id,odom_trans.header.frame_id)


	#       next publish the odometry message over ROS                
		theOdom = Odometry()
		theOdom.header.stamp = current_time
		theOdom.header.frame_id = "odom"
		theOdom.pose.pose.position.x = x
		theOdom.pose.pose.position.y = y
		theOdom.pose.pose.position.z = z
		theOdom.pose.pose.orientation = odom_quat

		theOdom.child_frame_id = "base_link"
	 
		theOdom.twist.twist.linear.x = Vx
		theOdom.twist.twist.linear.y = Vy
		theOdom.twist.twist.angular.z = Wz

		theStr = "%s Odom x:%f y:%f th:%f | %s | Vx:%f Vy:%f Wz:%f" % ( current_time , theOdom.pose.pose.position.x , theOdom.pose.pose.position.y ,th , theOdom.child_frame_id , theOdom.twist.twist.linear.x ,  theOdom.twist.twist.linear.y , theOdom.twist.twist.angular.z)  
		rospy.loginfo(theStr)
		pub.publish(theOdom)

		last_time = current_time
		rate.sleep()
	except:
		rospy.loginfo("strange!!! continue~")		
		continue

if __name__ == '__main__':
    try:
       
       # client.send("EnableSystem")
       # client.send("SetRobotSpeed Vx 400")
       # time.sleep(5)
       # client.send("SetRobotSpeed Vx 0")
       # client.send("ShutdownSystem")
                
        mesosphere_odom()
    except rospy.ROSInterruptException:
        pass
