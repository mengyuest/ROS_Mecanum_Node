"""autogenerated by genpy from beginner_tutorials/mbed_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mbed_data(genpy.Message):
  _md5sum = "7418c9c6fe4dfce9d9e0a65e1f6d6404"
  _type = "beginner_tutorials/mbed_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string time_stamp
float64[4] mbed_wheel_odometer
float64[4] mbed_wheel_rotation

"""
  __slots__ = ['time_stamp','mbed_wheel_odometer','mbed_wheel_rotation']
  _slot_types = ['string','float64[4]','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,mbed_wheel_odometer,mbed_wheel_rotation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mbed_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = ''
      if self.mbed_wheel_odometer is None:
        self.mbed_wheel_odometer = [0.,0.,0.,0.]
      if self.mbed_wheel_rotation is None:
        self.mbed_wheel_rotation = [0.,0.,0.,0.]
    else:
      self.time_stamp = ''
      self.mbed_wheel_odometer = [0.,0.,0.,0.]
      self.mbed_wheel_rotation = [0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.time_stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_4d.pack(*self.mbed_wheel_odometer))
      buff.write(_struct_4d.pack(*self.mbed_wheel_rotation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time_stamp = str[start:end].decode('utf-8')
      else:
        self.time_stamp = str[start:end]
      start = end
      end += 32
      self.mbed_wheel_odometer = _struct_4d.unpack(str[start:end])
      start = end
      end += 32
      self.mbed_wheel_rotation = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.time_stamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.mbed_wheel_odometer.tostring())
      buff.write(self.mbed_wheel_rotation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.time_stamp = str[start:end].decode('utf-8')
      else:
        self.time_stamp = str[start:end]
      start = end
      end += 32
      self.mbed_wheel_odometer = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.mbed_wheel_rotation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
